// functions in a arrow file are accesible from anywhere else in the same file.
function string foo(int arg1, int arg2, int arg3) {
  // variables can be singletons like the one bellow
  int num1 = 10

  // or you can have multiple variables be assigned the same initial value.
  int num2 num3 num4 = 5

  // you can also have multiple variables be assigned with multiple initial 
  // values. however there should never be more values than variables, and 
  // if in all cases, if there are less, the rest of the variables will have 
  // the initial value of the last value in the chain. so for the example bellow 
  // num5 is 5, num6 is 7, abd because there are more variables than values,
  // num7 is 7.
  int num5 num6 num7 = 5 7

  // the double arrow can be used to run single line commands.
  >> echo foo

  // the sintaxis >/ /> can be used to run multiline commands.
  // notice that things like aliases also work, as long as they exist prior to
  // the running of the command.
  >/
  echo bar
  file -j test.txt
  clear
  />

  // if, for, while, do while, and switch statements are exactly the same as in java
  // except for the fact that there's no ;
  if(num3 == num5)
    return "YAY!"
  else
    return "NAY"

  // theres also single line if statements, that work as a hybrid between the java and
  // c ones, where you can both set the asignation of a variable, or just run some code.
  // the first element after the question mark is when its true, and the second when its false.
  int out = num6 == 7 ? 7 : 0
  out == 7 ? return "YAY!" : return "NAY!"
}

// a class packs the functions in another layer of organisation. that way you can have  multiple
// classes that dont fight with eachother on ram or processing power.
class Bar {
  // like in java you can have functions that return something, and/or take something,
  // and depending on where the function is, depends on how visible it is.
  int fume = foo(5,7,9)

  // and like in java, you can have the functions dunp their return like running a void function in 
  // java. in that case the function runs, but the returned values is stred nowhere, and in the case of
  // void functions that dont return anything, well, the same thing happens.
  foo(0,1,2);
}

// you can also have classes that extend from other classes, and that implement interfaces. these work almost
// exactly like in java, except that you dont have to put in the commas after each interface.
class Foo extends Bar implements bar1 bar2 bar3{

}

// abstract classes, like the functions, are named after the "class" keyword.
class abstract Animal {

}

// and as for the interfaces, well, they are now implements. yes the same keyword as the one used in addind implementations.
// again. the class declaration is that if theres nothing after it but the name, then its a normal class.
// if the declaration after it is abstract or implements, then the class is either abstract, or an implementation, never both.
class implements Flying {

}

// also, an implementation can have multiple implementations, like the example bellow. all classes can extend from any other class
// too.
class implements Swimmer implements Fins Gills Eyes {

}

// direct commands can be run just by using the inline or multiline command execution, wherever in the script
// and when the script is ran, these commadns will also be ran.
>> echo B

// the language also supports the creation of aliases.
alias imDifferent {
  echo "I an different.\n"
  echo "No, I am."
}

// note that this is not order based. the program first registers all the classes and its functions, then the open
// functions then the aliases. as for the commands, when the script is ran, then the command runs 2, after everything before it,
// like other commands or scripts. you can run a script just by calling it.
>> other.arw

// and you can also import scripts with the inverse double arow, which internally prints the contents of the script
// into this one, meaning you can have quick code blocks like the ones in php.
<< another.arw

// you can then run any function from that script in the same way you would in the one you're working in. note,
// you can run a function anywhere in the script just by puttin it in the script like in the example bellow.
someOtherFunction()

// you can also run functions in the terminal, or in a inline/multiline caller, by calling the script,
// followed by a space and the function name, followed by the arguments if there are any.
>> test.arw foo 1 3 5

// you can also use redirects, pipes, etc in the commands, including aliases, but i have not added those yet so that's for another
// day.

// you can also create blocks by using the curly brackets, and you can also name them
bool imNew = true
amINew {
  if(imNew)
}

// named blocks can be injected anywhere in the script and serve as budget functions that dont take in anything, nor return it.
// these can be usefull for when you have a snippet that needs to be in mulptiple places.
<< amINew; return "bob"

// as you can see, the ; is used to provide a way to go in and out of the functions and commands for injections, inline commands and multiline commands.
int bubble = 25
>> echo ; bubble ;

// note that if statements and bools are special. as in the bool can be either true and false, or, 1 and 0, and the if statements can detect that.
// you can also qwick switch between true and false for any bool by putting a star after it.
imNew*

// the arrow code interpreter that comes with Dryad called Quill, will first generate the code for the script, when necesary, then, and only then,
// it starts running the code inside the file. that does mean each script runs twice technically, once to generate the code and once to execute it if needed,
// but that also means that if you have open code, with no class or function to wrap it or execute it, will be ran like normal, after the generation step,
// again, if needed.
bubble = Math.pow(5,2)
<< Math.arw 

// note that this means that anywhere in the code, you can import or inject code, after running it, since on the first read, the code doesnt run, and only
// gets generated and assigned. And only after that, does it get ran, again if needed. you can allways load a file without running it, just by putting an 
// asterix at the end. this ensures that the code inside gets generated and loaded into memory, but not ran, which can be usefull in some cases. this can also 
// be used for execution filtering in a way.
<< Specker.arw*
